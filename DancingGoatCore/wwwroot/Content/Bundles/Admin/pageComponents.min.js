function _possibleConstructorReturn(n, t) { if (!n) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? n : t } function _inherits(n, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t); n.prototype = Object.create(t && t.prototype, { constructor: { value: n, enumerable: !1, writable: !0, configurable: !0 } }); t && (Object.setPrototypeOf ? Object.setPrototypeOf(n, t) : n.__proto__ = t) } function _classCallCheck(n, t) { if (!(n instanceof t)) throw new TypeError("Cannot call a class as a function"); } function __guard__(n, t) { if (void 0 !== n && null !== n) return t(n) } function __guardMethod__(n, t, i) { if (void 0 !== n && null !== n && "function" == typeof n[t]) return i(n, t) } var without, camelize, contentLoaded; (function () { window.kentico.pageBuilder.registerInlineEditor("color-picker-editor", { init: function (n) { for (var u, i = n.editor, t = [{ button: i.querySelector("#first-color-btn"), cssClass: "first-color" }, { button: i.querySelector("#second-color-btn"), cssClass: "second-color" }, { button: i.querySelector("#third-color-btn"), cssClass: "third-color" },], f = function (r) { for (var f, u = 0; u < t.length; ++u)i.parentElement.classList.remove(t[u].cssClass), t[u].button.children[0].classList.remove("icon-cb-check-sign"); i.parentElement.classList.add(r.cssClass); r.button.children[0].classList.add("icon-cb-check-sign"); f = new CustomEvent("updateProperty", { detail: { value: r.cssClass, name: n.propertyName } }); i.dispatchEvent(f) }, r = 0; r < t.length; ++r)n.propertyValue === t[r].cssClass && t[r].button.children[0].classList.add("icon-cb-check-sign"), u = function (n) { f(t[n]) }.bind(this, r), t[r].button.addEventListener("click", u) } }) })(); "use strict"; var _createClass = function () { function n(n, t) { for (var i, r = 0; r < t.length; r++)i = t[r], i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(n, i.key, i) } return function (t, i, r) { return i && n(t.prototype, i), r && n(t, r), t } }(), Emitter = function () { function n() { _classCallCheck(this, n) } return _createClass(n, [{ key: "on", value: function (n, t) { return this._callbacks = this._callbacks || {}, this._callbacks[n] || (this._callbacks[n] = []), this._callbacks[n].push(t), this } }, { key: "emit", value: function (n) { var i, o; if (this._callbacks = this._callbacks || {}, i = this._callbacks[n], i) { for (var r = arguments.length, f = Array(r > 1 ? r - 1 : 0), t = 1; t < r; t++)f[t - 1] = arguments[t]; for (var u = i, e = 0, u = u; ;) { if (e >= u.length) break; o = u[e++]; o.apply(this, f) } } return this } }, { key: "off", value: function (n, t) { var i, r; if (!this._callbacks || 0 === arguments.length) return this._callbacks = {}, this; if (i = this._callbacks[n], !i) return this; if (1 === arguments.length) return delete this._callbacks[n], this; for (r = 0; r < i.length; r++)if (i[r] === t) { i.splice(r, 1); break } return this } }]), n }(), Dropzone = function (n) { function t(n, i) { var e, o; _classCallCheck(this, t); var r = _possibleConstructorReturn(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this)), u = void 0, f = void 0; if (r.element = n, r.version = t.version, r.defaultOptions.previewTemplate = r.defaultOptions.previewTemplate.replace(/\n*/g, ""), r.clickableElements = [], r.listeners = [], r.files = [], "string" == typeof r.element && (r.element = document.querySelector(r.element)), !r.element || null == r.element.nodeType) throw new Error("Invalid dropzone element."); if (r.element.dropzone) throw new Error("Dropzone already attached."); if (t.instances.push(r), r.element.dropzone = r, e = null != (f = t.optionsForElement(r.element)) ? f : {}, r.options = t.extend({}, r.defaultOptions, e, null != i ? i : {}), r.options.forceFallback || !t.isBrowserSupported()) return o = r.options.fallback.call(r), _possibleConstructorReturn(r, o); if (null == r.options.url && (r.options.url = r.element.getAttribute("action")), !r.options.url) throw new Error("No URL provided."); if (r.options.acceptedFiles && r.options.acceptedMimeTypes) throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated."); if (r.options.uploadMultiple && r.options.chunking) throw new Error("You cannot set both: uploadMultiple and chunking."); return r.options.acceptedMimeTypes && (r.options.acceptedFiles = r.options.acceptedMimeTypes, delete r.options.acceptedMimeTypes), null != r.options.renameFilename && (r.options.renameFile = function (n) { return r.options.renameFilename.call(r, n.name, n) }), r.options.method = r.options.method.toUpperCase(), (u = r.getExistingFallback()) && u.parentNode && u.parentNode.removeChild(u), !1 !== r.options.previewsContainer && (r.previewsContainer = r.options.previewsContainer ? t.getElement(r.options.previewsContainer, "previewsContainer") : r.element), r.options.clickable && (r.clickableElements = !0 === r.options.clickable ? [r.element] : t.getElements(r.options.clickable, "clickable")), r.init(), r } return _inherits(t, n), _createClass(t, null, [{ key: "initClass", value: function () { this.prototype.Emitter = Emitter; this.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "addedfile", "addedfiles", "removedfile", "thumbnail", "error", "errormultiple", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded", "maxfilesreached", "queuecomplete"]; this.prototype.defaultOptions = { url: null, method: "post", withCredentials: !1, timeout: 3e4, parallelUploads: 2, uploadMultiple: !1, chunking: !1, forceChunking: !1, chunkSize: 2e6, parallelChunkUploads: !1, retryChunks: !1, retryChunksLimit: 3, maxFilesize: 256, paramName: "file", createImageThumbnails: !0, maxThumbnailFilesize: 10, thumbnailWidth: 120, thumbnailHeight: 120, thumbnailMethod: "crop", resizeWidth: null, resizeHeight: null, resizeMimeType: null, resizeQuality: .8, resizeMethod: "contain", filesizeBase: 1e3, maxFiles: null, headers: null, clickable: !0, ignoreHiddenFiles: !0, acceptedFiles: null, acceptedMimeTypes: null, autoProcessQueue: !0, autoQueue: !0, addRemoveLinks: !1, previewsContainer: null, hiddenInputContainer: "body", capture: null, renameFilename: null, renameFile: null, forceFallback: !1, dictDefaultMessage: "Drop files here to upload", dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.", dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.", dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.", dictInvalidFileType: "You can't upload files of this type.", dictResponseError: "Server responded with {{statusCode}} code.", dictCancelUpload: "Cancel upload", dictUploadCanceled: "Upload canceled.", dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?", dictRemoveFile: "Remove file", dictRemoveFileConfirmation: null, dictMaxFilesExceeded: "You can not upload any more files.", dictFileSizeUnits: { tb: "TB", gb: "GB", mb: "MB", kb: "KB", b: "b" }, init: function () { }, params: function (n, t, i) { if (i) return { dzuuid: i.file.upload.uuid, dzchunkindex: i.index, dztotalfilesize: i.file.size, dzchunksize: this.options.chunkSize, dztotalchunkcount: i.file.upload.totalChunkCount, dzchunkbyteoffset: i.index * this.options.chunkSize } }, accept: function (n, t) { return t() }, chunksUploaded: function (n, t) { t() }, fallback: function () { var i = void 0, e, r, n; this.element.className = this.element.className + " dz-browser-not-supported"; for (var u = this.element.getElementsByTagName("div"), f = 0, u = u; ;) { if (f >= u.length) break; if (e = u[f++], r = e, /(^| )dz-message($| )/.test(r.className)) { i = r; r.className = "dz-message"; break } } return i || (i = t.createElement('<div class="dz-message"><span><\/span><\/div>'), this.element.appendChild(i)), n = i.getElementsByTagName("span")[0], n && (null != n.textContent ? n.textContent = this.options.dictFallbackMessage : null != n.innerText && (n.innerText = this.options.dictFallbackMessage)), this.element.appendChild(this.getFallbackForm()) }, resize: function (n, t, i, r) { var u = { srcX: 0, srcY: 0, srcWidth: n.width, srcHeight: n.height }, f = n.width / n.height, e; if (null == t && null == i ? (t = u.srcWidth, i = u.srcHeight) : null == t ? t = i * f : null == i && (i = t / f), t = Math.min(t, u.srcWidth), i = Math.min(i, u.srcHeight), e = t / i, u.srcWidth > t || u.srcHeight > i) if ("crop" === r) f > e ? (u.srcHeight = n.height, u.srcWidth = u.srcHeight * e) : (u.srcWidth = n.width, u.srcHeight = u.srcWidth / e); else { if ("contain" !== r) throw new Error("Unknown resizeMethod '" + r + "'"); f > e ? i = t / f : t = i * f } return u.srcX = (n.width - u.srcWidth) / 2, u.srcY = (n.height - u.srcHeight) / 2, u.trgWidth = t, u.trgHeight = i, u }, transformFile: function (n, t) { return (this.options.resizeWidth || this.options.resizeHeight) && n.type.match(/image.*/) ? this.resizeImage(n, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, t) : t(n) }, previewTemplate: '<div class="dz-preview dz-file-preview">\n  <div class="dz-image"><img data-dz-thumbnail /><\/div>\n  <div class="dz-details">\n    <div class="dz-size"><span data-dz-size><\/span><\/div>\n    <div class="dz-filename"><span data-dz-name><\/span><\/div>\n  <\/div>\n  <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress><\/span><\/div>\n  <div class="dz-error-message"><span data-dz-errormessage><\/span><\/div>\n  <div class="dz-success-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Check<\/title>\n      <defs><\/defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <path d="M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" stroke-opacity="0.198794158" stroke="#747474" fill-opacity="0.816519475" fill="#FFFFFF" sketch:type="MSShapeGroup"><\/path>\n      <\/g>\n    <\/svg>\n  <\/div>\n  <div class="dz-error-mark">\n    <svg width="54px" height="54px" viewBox="0 0 54 54" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns">\n      <title>Error<\/title>\n      <defs><\/defs>\n      <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">\n        <g id="Check-+-Oval-2" sketch:type="MSLayerGroup" stroke="#747474" stroke-opacity="0.198794158" fill="#FFFFFF" fill-opacity="0.816519475">\n          <path d="M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z" id="Oval-2" sketch:type="MSShapeGroup"><\/path>\n        <\/g>\n      <\/g>\n    <\/svg>\n  <\/div>\n<\/div>', drop: function () { return this.element.classList.remove("dz-drag-hover") }, dragstart: function () { }, dragend: function () { return this.element.classList.remove("dz-drag-hover") }, dragenter: function () { return this.element.classList.add("dz-drag-hover") }, dragover: function () { return this.element.classList.add("dz-drag-hover") }, dragleave: function () { return this.element.classList.remove("dz-drag-hover") }, paste: function () { }, reset: function () { return this.element.classList.remove("dz-started") }, addedfile: function (n) { var i = this, s, r, l; if (this.element === this.previewsContainer && this.element.classList.add("dz-started"), this.previewsContainer) { n.previewElement = t.createElement(this.options.previewTemplate.trim()); n.previewTemplate = n.previewElement; this.previewsContainer.appendChild(n.previewElement); for (var u = n.previewElement.querySelectorAll("[data-dz-name]"), o = 0, u = u; ;) { if (o >= u.length) break; s = u[o++]; r = s; r.textContent = n.name } for (var f = n.previewElement.querySelectorAll("[data-dz-size]"), h = 0, f = f; !(h >= f.length);)r = f[h++], r.innerHTML = this.filesize(n.size); this.options.addRemoveLinks && (n._removeLink = t.createElement('<a class="dz-remove" href="javascript:undefined;" data-dz-remove>' + this.options.dictRemoveFile + "<\/a>"), n.previewElement.appendChild(n._removeLink)); for (var a = function (r) { return r.preventDefault(), r.stopPropagation(), n.status === t.UPLOADING ? t.confirm(i.options.dictCancelUploadConfirmation, function () { return i.removeFile(n) }) : i.options.dictRemoveFileConfirmation ? t.confirm(i.options.dictRemoveFileConfirmation, function () { return i.removeFile(n) }) : i.removeFile(n) }, e = n.previewElement.querySelectorAll("[data-dz-remove]"), c = 0, e = e; ;) { if (c >= e.length) break; l = e[c++]; l.addEventListener("click", a) } } }, removedfile: function (n) { return null != n.previewElement && null != n.previewElement.parentNode && n.previewElement.parentNode.removeChild(n.previewElement), this._updateMaxFilesReachedClass() }, thumbnail: function (n, t) { var f, r; if (n.previewElement) { n.previewElement.classList.remove("dz-file-preview"); for (var i = n.previewElement.querySelectorAll("[data-dz-thumbnail]"), u = 0, i = i; ;) { if (u >= i.length) break; f = i[u++]; r = f; r.alt = n.name; r.src = t } return setTimeout(function () { return n.previewElement.classList.add("dz-image-preview") }, 1) } }, error: function (n, t) { var u; if (n.previewElement) { n.previewElement.classList.add("dz-error"); "String" != typeof t && t.error && (t = t.error); for (var i = n.previewElement.querySelectorAll("[data-dz-errormessage]"), r = 0, i = i; ;) { if (r >= i.length) break; u = i[r++]; u.textContent = t } } }, errormultiple: function () { }, processing: function (n) { if (n.previewElement && (n.previewElement.classList.add("dz-processing"), n._removeLink)) return n._removeLink.textContent = this.options.dictCancelUpload }, processingmultiple: function () { }, uploadprogress: function (n, t) { var f, i; if (n.previewElement) for (var r = n.previewElement.querySelectorAll("[data-dz-uploadprogress]"), u = 0, r = r; ;) { if (u >= r.length) break; f = r[u++]; i = f; "PROGRESS" === i.nodeName ? i.value = t : i.style.width = t + "%" } }, totaluploadprogress: function () { }, sending: function () { }, sendingmultiple: function () { }, success: function (n) { if (n.previewElement) return n.previewElement.classList.add("dz-success") }, successmultiple: function () { }, canceled: function (n) { return this.emit("error", n, this.options.dictUploadCanceled) }, canceledmultiple: function () { }, complete: function (n) { if (n._removeLink && (n._removeLink.textContent = this.options.dictRemoveFile), n.previewElement) return n.previewElement.classList.add("dz-complete") }, completemultiple: function () { }, maxfilesexceeded: function () { }, maxfilesreached: function () { }, queuecomplete: function () { }, addedfiles: function () { } }; this.prototype._thumbnailQueue = []; this.prototype._processingThumbnail = !1 } }, { key: "extend", value: function (n) { for (var s, u, f, h, i = arguments.length, e = Array(i > 1 ? i - 1 : 0), t = 1; t < i; t++)e[t - 1] = arguments[t]; for (var r = e, o = 0, r = r; ;) { if (o >= r.length) break; s = r[o++]; u = s; for (f in u) h = u[f], n[f] = h } return n } }]), _createClass(t, [{ key: "getAcceptedFiles", value: function () { return this.files.filter(function (n) { return n.accepted }).map(function (n) { return n }) } }, { key: "getRejectedFiles", value: function () { return this.files.filter(function (n) { return !n.accepted }).map(function (n) { return n }) } }, { key: "getFilesWithStatus", value: function (n) { return this.files.filter(function (t) { return t.status === n }).map(function (n) { return n }) } }, { key: "getQueuedFiles", value: function () { return this.getFilesWithStatus(t.QUEUED) } }, { key: "getUploadingFiles", value: function () { return this.getFilesWithStatus(t.UPLOADING) } }, { key: "getAddedFiles", value: function () { return this.getFilesWithStatus(t.ADDED) } }, { key: "getActiveFiles", value: function () { return this.files.filter(function (n) { return n.status === t.UPLOADING || n.status === t.QUEUED }).map(function (n) { return n }) } }, { key: "init", value: function () { var n = this, e, u, i; ("form" === this.element.tagName && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(t.createElement('<div class="dz-default dz-message"><span>' + this.options.dictDefaultMessage + "<\/span><\/div>")), this.clickableElements.length) && !function t() { return n.hiddenFileInput && n.hiddenFileInput.parentNode.removeChild(n.hiddenFileInput), n.hiddenFileInput = document.createElement("input"), n.hiddenFileInput.setAttribute("type", "file"), (null === n.options.maxFiles || n.options.maxFiles > 1) && n.hiddenFileInput.setAttribute("multiple", "multiple"), n.hiddenFileInput.className = "dz-hidden-input", null !== n.options.acceptedFiles && n.hiddenFileInput.setAttribute("accept", n.options.acceptedFiles), null !== n.options.capture && n.hiddenFileInput.setAttribute("capture", n.options.capture), n.hiddenFileInput.style.visibility = "hidden", n.hiddenFileInput.style.position = "absolute", n.hiddenFileInput.style.top = "0", n.hiddenFileInput.style.left = "0", n.hiddenFileInput.style.height = "0", n.hiddenFileInput.style.width = "0", document.querySelector(n.options.hiddenInputContainer).appendChild(n.hiddenFileInput), n.hiddenFileInput.addEventListener("change", function () { var i = n.hiddenFileInput.files, f, e; if (i.length) for (var r = i, u = 0, r = r; ;) { if (u >= r.length) break; f = r[u++]; e = f; n.addFile(e) } return n.emit("addedfiles", i), t() }) }(); this.URL = null !== window.URL ? window.URL : window.webkitURL; for (var r = this.events, f = 0, r = r; ;) { if (f >= r.length) break; e = r[f++]; u = e; this.on(u, this.options[u]) } return this.on("uploadprogress", function () { return n.updateTotalUploadProgress() }), this.on("removedfile", function () { return n.updateTotalUploadProgress() }), this.on("canceled", function (t) { return n.emit("complete", t) }), this.on("complete", function () { if (0 === n.getAddedFiles().length && 0 === n.getUploadingFiles().length && 0 === n.getQueuedFiles().length) return setTimeout(function () { return n.emit("queuecomplete") }, 0) }), i = function (n) { return n.stopPropagation(), n.preventDefault ? n.preventDefault() : n.returnValue = !1 }, this.listeners = [{ element: this.element, events: { dragstart: function (t) { return n.emit("dragstart", t) }, dragenter: function (t) { return i(t), n.emit("dragenter", t) }, dragover: function (t) { var r = void 0; try { r = t.dataTransfer.effectAllowed } catch (n) { } return t.dataTransfer.dropEffect = "move" === r || "linkMove" === r ? "move" : "copy", i(t), n.emit("dragover", t) }, dragleave: function (t) { return n.emit("dragleave", t) }, drop: function (t) { return i(t), n.drop(t) }, dragend: function (t) { return n.emit("dragend", t) } } }], this.clickableElements.forEach(function (i) { return n.listeners.push({ element: i, events: { click: function (r) { return (i !== n.element || r.target === n.element || t.elementInside(r.target, n.element.querySelector(".dz-message"))) && n.hiddenFileInput.click(), !0 } } }) }), this.enable(), this.options.init.call(this) } }, { key: "destroy", value: function () { return this.disable(), this.removeAllFiles(!0), (null != this.hiddenFileInput ? this.hiddenFileInput.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone, t.instances.splice(t.instances.indexOf(this), 1) } }, { key: "updateTotalUploadProgress", value: function () { var n = void 0, t = 0, i = 0, e, u; if (this.getActiveFiles().length) { for (var r = this.getActiveFiles(), f = 0, r = r; ;) { if (f >= r.length) break; e = r[f++]; u = e; t += u.upload.bytesSent; i += u.upload.total } n = 100 * t / i } else n = 100; return this.emit("totaluploadprogress", n, i, t) } }, { key: "_getParamName", value: function (n) { return "function" == typeof this.options.paramName ? this.options.paramName(n) : this.options.paramName + (this.options.uploadMultiple ? "[" + n + "]" : "") } }, { key: "_renameFile", value: function (n) { return "function" != typeof this.options.renameFile ? n.name : this.options.renameFile(n) } }, { key: "getFallbackForm", value: function () { var u = void 0, n = void 0, i, r; return (u = this.getExistingFallback()) ? u : (i = '<div class="dz-fallback">', this.options.dictFallbackText && (i += "<p>" + this.options.dictFallbackText + "<\/p>"), i += '<input type="file" name="' + this._getParamName(0) + '" ' + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + ' /><input type="submit" value="Upload!"><\/div>', r = t.createElement(i), "FORM" !== this.element.tagName ? (n = t.createElement('<form action="' + this.options.url + '" enctype="multipart/form-data" method="' + this.options.method + '"><\/form>'), n.appendChild(r)) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), null != n ? n : r) } }, { key: "getExistingFallback", value: function () { for (var i, r, t = ["div", "form"], n = 0; n < t.length; n++)if (r = t[n], i = function (n) { for (var u, i, t = n, r = 0, t = t; ;) { if (r >= t.length) break; if (u = t[r++], i = u, /(^| )fallback($| )/.test(i.className)) return i } }(this.element.getElementsByTagName(r))) return i } }, { key: "setupEventListeners", value: function () { return this.listeners.map(function (n) { return function () { var i = [], t, r; for (t in n.events) r = n.events[t], i.push(n.element.addEventListener(t, r, !1)); return i }() }) } }, { key: "removeEventListeners", value: function () { return this.listeners.map(function (n) { return function () { var i = [], t, r; for (t in n.events) r = n.events[t], i.push(n.element.removeEventListener(t, r, !1)); return i }() }) } }, { key: "disable", value: function () { var n = this; return this.clickableElements.forEach(function (n) { return n.classList.remove("dz-clickable") }), this.removeEventListeners(), this.disabled = !0, this.files.map(function (t) { return n.cancelUpload(t) }) } }, { key: "enable", value: function () { return delete this.disabled, this.clickableElements.forEach(function (n) { return n.classList.add("dz-clickable") }), this.setupEventListeners() } }, { key: "filesize", value: function (n) { var i = 0, u = "b", r, t, f; if (n > 0) { for (r = ["tb", "gb", "mb", "kb", "b"], t = 0; t < r.length; t++)if (f = r[t], n >= Math.pow(this.options.filesizeBase, 4 - t) / 10) { i = n / Math.pow(this.options.filesizeBase, 4 - t); u = f; break } i = Math.round(10 * i) / 10 } return "<strong>" + i + "<\/strong> " + this.options.dictFileSizeUnits[u] } }, { key: "_updateMaxFilesReachedClass", value: function () { return null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (this.getAcceptedFiles().length === this.options.maxFiles && this.emit("maxfilesreached", this.files), this.element.classList.add("dz-max-files-reached")) : this.element.classList.remove("dz-max-files-reached") } }, { key: "drop", value: function (n) { var i, t; n.dataTransfer && (this.emit("drop", n), i = n.dataTransfer.files, (this.emit("addedfiles", i), i.length) && (t = n.dataTransfer.items, t && t.length && null != t[0].webkitGetAsEntry ? this._addFilesFromItems(t) : this.handleFiles(i))) } }, { key: "paste", value: function (n) { if (null != __guard__(null != n ? n.clipboardData : void 0, function (n) { return n.items })) { this.emit("paste", n); var t = n.clipboardData.items; return t.length ? this._addFilesFromItems(t) : void 0 } } }, { key: "handleFiles", value: function (n) { for (var r, u, t = n, i = 0, t = t; ;) { if (i >= t.length) break; r = t[i++]; u = r; this.addFile(u) } } }, { key: "_addFilesFromItems", value: function (n) { var t = this; return function () { for (var o, u, i, r = [], f = n, e = 0, f = f; ;) { if (e >= f.length) break; o = f[e++]; i = o; null != i.webkitGetAsEntry && (u = i.webkitGetAsEntry()) ? u.isFile ? r.push(t.addFile(i.getAsFile())) : u.isDirectory ? r.push(t._addFilesFromDirectory(u, u.name)) : r.push(void 0) : null != i.getAsFile && (null == i.kind || "file" === i.kind) ? r.push(t.addFile(i.getAsFile())) : r.push(void 0) } return r }() } }, { key: "_addFilesFromDirectory", value: function (n, t) { var i = this, r = n.createReader(), u = function (n) { return __guardMethod__(console, "log", function (t) { return t.log(n) }) }; return function n() { return r.readEntries(function (r) { var o, u; if (r.length > 0) { for (var f = r, e = 0, f = f; ;) { if (e >= f.length) break; o = f[e++]; u = o; u.isFile ? u.file(function (n) { if (!i.options.ignoreHiddenFiles || "." !== n.name.substring(0, 1)) return n.fullPath = t + "/" + n.name, i.addFile(n) }) : u.isDirectory && i._addFilesFromDirectory(u, t + "/" + u.name) } n() } return null }, u) }() } }, { key: "accept", value: function (n, i) { return n.size > 1048576 * this.options.maxFilesize ? i(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(n.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : t.isValidFile(n, this.options.acceptedFiles) ? null != this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (i(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", n)) : this.options.accept.call(this, n, i) : i(this.options.dictInvalidFileType) } }, { key: "addFile", value: function (n) { var i = this; return n.upload = { uuid: t.uuidv4(), progress: 0, total: n.size, bytesSent: 0, filename: this._renameFile(n), chunked: this.options.chunking && (this.options.forceChunking || n.size > this.options.chunkSize), totalChunkCount: Math.ceil(n.size / this.options.chunkSize) }, this.files.push(n), n.status = t.ADDED, this.emit("addedfile", n), this._enqueueThumbnail(n), this.accept(n, function (t) { return t ? (n.accepted = !1, i._errorProcessing([n], t)) : (n.accepted = !0, i.options.autoQueue && i.enqueueFile(n)), i._updateMaxFilesReachedClass() }) } }, { key: "enqueueFiles", value: function (n) { for (var r, u, t = n, i = 0, t = t; ;) { if (i >= t.length) break; r = t[i++]; u = r; this.enqueueFile(u) } return null } }, { key: "enqueueFile", value: function (n) { var i = this; if (n.status !== t.ADDED || !0 !== n.accepted) throw new Error("This file can't be queued because it has already been processed or was rejected."); if (n.status = t.QUEUED, this.options.autoProcessQueue) return setTimeout(function () { return i.processQueue() }, 0) } }, { key: "_enqueueThumbnail", value: function (n) { var t = this; if (this.options.createImageThumbnails && n.type.match(/image.*/) && n.size <= 1048576 * this.options.maxThumbnailFilesize) return this._thumbnailQueue.push(n), setTimeout(function () { return t._processThumbnailQueue() }, 0) } }, { key: "_processThumbnailQueue", value: function () { var n = this, t; if (!this._processingThumbnail && 0 !== this._thumbnailQueue.length) return this._processingThumbnail = !0, t = this._thumbnailQueue.shift(), this.createThumbnail(t, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, !0, function (i) { return n.emit("thumbnail", t, i), n._processingThumbnail = !1, n._processThumbnailQueue() }) } }, { key: "removeFile", value: function (n) { if (n.status === t.UPLOADING && this.cancelUpload(n), this.files = without(this.files, n), this.emit("removedfile", n), 0 === this.files.length) return this.emit("reset") } }, { key: "removeAllFiles", value: function (n) { var f, r; null == n && (n = !1); for (var i = this.files.slice(), u = 0, i = i; ;) { if (u >= i.length) break; f = i[u++]; r = f; (r.status !== t.UPLOADING || n) && this.removeFile(r) } return null } }, { key: "resizeImage", value: function (n, i, r, u, f) { var e = this; return this.createThumbnail(n, i, r, u, !1, function (i, r) { var u, o; return null == r ? f(n) : (u = e.options.resizeMimeType, null == u && (u = n.type), o = r.toDataURL(u, e.options.resizeQuality), "image/jpeg" !== u && "image/jpg" !== u || (o = ExifRestore.restore(n.dataURL, o)), f(t.dataURItoBlob(o))) }) } }, { key: "createThumbnail", value: function (n, t, i, r, u, f) { var o = this, e = new FileReader; return e.onload = function () { return n.dataURL = e.result, "image/svg+xml" === n.type ? void (null != f && f(e.result)) : o.createThumbnailFromUrl(n, t, i, r, u, f) }, e.readAsDataURL(n) } }, { key: "createThumbnailFromUrl", value: function (n, t, i, r, u, f, e) { var s = this, o = document.createElement("img"); return e && (o.crossOrigin = e), o.onload = function () { var e = function (n) { return n(1) }; return "undefined" != typeof EXIF && null !== EXIF && u && (e = function (n) { return EXIF.getData(o, function () { return n(EXIF.getTag(this, "Orientation")) }) }), e(function (u) { var l; n.width = o.width; n.height = o.height; var e = s.options.resize.call(s, n, t, i, r), c = document.createElement("canvas"), h = c.getContext("2d"); switch (c.width = e.trgWidth, c.height = e.trgHeight, u > 4 && (c.width = e.trgHeight, c.height = e.trgWidth), u) { case 2: h.translate(c.width, 0); h.scale(-1, 1); break; case 3: h.translate(c.width, c.height); h.rotate(Math.PI); break; case 4: h.translate(0, c.height); h.scale(1, -1); break; case 5: h.rotate(.5 * Math.PI); h.scale(1, -1); break; case 6: h.rotate(.5 * Math.PI); h.translate(0, -c.height); break; case 7: h.rotate(.5 * Math.PI); h.translate(c.width, -c.height); h.scale(-1, 1); break; case 8: h.rotate(-.5 * Math.PI); h.translate(-c.width, 0) }return drawImageIOSFix(h, o, null != e.srcX ? e.srcX : 0, null != e.srcY ? e.srcY : 0, e.srcWidth, e.srcHeight, null != e.trgX ? e.trgX : 0, null != e.trgY ? e.trgY : 0, e.trgWidth, e.trgHeight), l = c.toDataURL("image/png"), null != f ? f(l, c) : void 0 }) }, null != f && (o.onerror = f), o.src = n.dataURL } }, { key: "processQueue", value: function () { var t = this.options.parallelUploads, i = this.getUploadingFiles().length, r = i, n; if (!(i >= t) && (n = this.getQueuedFiles(), n.length > 0)) { if (this.options.uploadMultiple) return this.processFiles(n.slice(0, t - i)); for (; r < t;) { if (!n.length) return; this.processFile(n.shift()); r++ } } } }, { key: "processFile", value: function (n) { return this.processFiles([n]) } }, { key: "processFiles", value: function (n) { for (var f, i, r = n, u = 0, r = r; ;) { if (u >= r.length) break; f = r[u++]; i = f; i.processing = !0; i.status = t.UPLOADING; this.emit("processing", i) } return this.options.uploadMultiple && this.emit("processingmultiple", n), this.uploadFiles(n) } }, { key: "_getFilesWithXhr", value: function (n) { return this.files.filter(function (t) { return t.xhr === n }).map(function (n) { return n }) } }, { key: "cancelUpload", value: function (n) { var e, s, h; if (n.status === t.UPLOADING) { for (var i = this._getFilesWithXhr(n.xhr), r = i, f = 0, r = r; ;) { if (f >= r.length) break; e = r[f++]; e.status = t.CANCELED } void 0 !== n.xhr && n.xhr.abort(); for (var u = i, o = 0, u = u; ;) { if (o >= u.length) break; s = u[o++]; h = s; this.emit("canceled", h) } this.options.uploadMultiple && this.emit("canceledmultiple", i) } else n.status !== t.ADDED && n.status !== t.QUEUED || (n.status = t.CANCELED, this.emit("canceled", n), this.options.uploadMultiple && this.emit("canceledmultiple", [n])); if (this.options.autoProcessQueue) return this.processQueue() } }, { key: "resolveOption", value: function (n) { if ("function" == typeof n) { for (var i = arguments.length, r = Array(i > 1 ? i - 1 : 0), t = 1; t < i; t++)r[t - 1] = arguments[t]; return n.apply(this, r) } return n } }, { key: "uploadFile", value: function (n) { return this.uploadFiles([n]) } }, { key: "uploadFiles", value: function (n) { var i = this; this._transformFiles(n, function (r) { var e, s, h, f; if (n[0].upload.chunked) { var u = n[0], o = r[0], c = 0; if (u.upload.chunks = [], e = function () { for (var r = 0; void 0 !== u.upload.chunks[r];)r++; if (!(r >= u.upload.totalChunkCount)) { c++; var f = r * i.options.chunkSize, e = Math.min(f + i.options.chunkSize, u.size), s = { name: i._getParamName(0), data: o.webkitSlice ? o.webkitSlice(f, e) : o.slice(f, e), filename: u.upload.filename, chunkIndex: r }; u.upload.chunks[r] = { file: u, index: r, dataBlock: s, status: t.UPLOADING, progress: 0, retries: 0 }; i._uploadData(n, [s]) } }, u.upload.finishedChunkUpload = function (r) { var o = !0, f; for (r.status = t.SUCCESS, r.dataBlock = null, f = 0; f < u.upload.totalChunkCount; f++) { if (void 0 === u.upload.chunks[f]) return e(); u.upload.chunks[f].status !== t.SUCCESS && (o = !1) } o && i.options.chunksUploaded(u, function () { i._finished(n, "", null) }) }, i.options.parallelChunkUploads) for (s = 0; s < u.upload.totalChunkCount; s++)e(); else e() } else { for (h = [], f = 0; f < n.length; f++)h[f] = { name: i._getParamName(f), data: r[f], filename: n[f].upload.filename }; i._uploadData(n, h) } }) } }, { key: "_getChunk", value: function (n, t) { for (var i = 0; i < n.upload.totalChunkCount; i++)if (void 0 !== n.upload.chunks[i] && n.upload.chunks[i].xhr === t) return n.upload.chunks[i] } }, { key: "_uploadData", value: function (n, i) { for (var w, b, k, e, l, a, u, f, v, d, nt, tt, o, s, h = this, r = new XMLHttpRequest, c = n, p = 0, c = c; ;) { if (p >= c.length) break; w = c[p++]; w.xhr = r } n[0].upload.chunked && (n[0].upload.chunks[i[0].chunkIndex].xhr = r); b = this.resolveOption(this.options.method, n); k = this.resolveOption(this.options.url, n); r.open(b, k, !0); r.timeout = this.resolveOption(this.options.timeout, n); r.withCredentials = !!this.options.withCredentials; r.onload = function (t) { h._finishedUploading(n, r, t) }; r.onerror = function () { h._handleUploadError(n, r) }; (null != r.upload ? r.upload : r).onprogress = function (t) { return h._updateFilesUploadProgress(n, r, t) }; e = { Accept: "application/json", "Cache-Control": "no-cache", "X-Requested-With": "XMLHttpRequest" }; this.options.headers && t.extend(e, this.options.headers); for (l in e) a = e[l], a && r.setRequestHeader(l, a); if (u = new FormData, this.options.params) { f = this.options.params; "function" == typeof f && (f = f.call(this, n, r, n[0].upload.chunked ? this._getChunk(n[0], r) : null)); for (v in f) d = f[v], u.append(v, d) } for (var y = n, g = 0, y = y; ;) { if (g >= y.length) break; nt = y[g++]; tt = nt; this.emit("sending", tt, r, u) } for (this.options.uploadMultiple && this.emit("sendingmultiple", n, r, u), this._addFormElementData(u), o = 0; o < i.length; o++)s = i[o], u.append(s.name, s.data, s.filename); this.submitRequest(r, u, n) } }, { key: "_transformFiles", value: function (n, t) { for (var r = this, u = [], f = 0, i = 0; i < n.length; i++)!function (i) { r.options.transformFile.call(r, n[i], function (r) { u[i] = r; ++f === n.length && t(u) }) }(i) } }, { key: "_addFormElementData", value: function (n) { var s, c, e; if ("FORM" === this.element.tagName) for (var u = this.element.querySelectorAll("input, textarea, select, button"), o = 0, u = u; ;) { if (o >= u.length) break; s = u[o++]; var t = s, r = t.getAttribute("name"), i = t.getAttribute("type"); if (i && (i = i.toLowerCase()), void 0 !== r && null !== r) if ("SELECT" === t.tagName && t.hasAttribute("multiple")) for (var f = t.options, h = 0, f = f; ;) { if (h >= f.length) break; c = f[h++]; e = c; e.selected && n.append(r, e.value) } else (!i || "checkbox" !== i && "radio" !== i || t.checked) && n.append(r, t.value) } } }, { key: "_updateFilesUploadProgress", value: function (n, t, i) { var e = void 0, r, o, u, b, s, d, h, a, nt, f, it, p; if (void 0 !== i) { if (e = 100 * i.loaded / i.total, n[0].upload.chunked) { for (r = n[0], o = this._getChunk(r, t), o.progress = e, o.total = i.total, o.bytesSent = i.loaded, r.upload.progress = 0, r.upload.total = 0, r.upload.bytesSent = 0, u = 0; u < r.upload.totalChunkCount; u++)void 0 !== r.upload.chunks[u] && void 0 !== r.upload.chunks[u].progress && (r.upload.progress += r.upload.chunks[u].progress, r.upload.total += r.upload.chunks[u].total, r.upload.bytesSent += r.upload.chunks[u].bytesSent); r.upload.progress = r.upload.progress / r.upload.totalChunkCount } else for (var c = n, w = 0, c = c; ;) { if (w >= c.length) break; b = c[w++]; s = b; s.upload.progress = e; s.upload.total = i.total; s.upload.bytesSent = i.loaded } for (var l = n, k = 0, l = l; ;) { if (k >= l.length) break; d = l[k++]; h = d; this.emit("uploadprogress", h, h.upload.progress, h.upload.bytesSent) } } else { a = !0; e = 100; for (var v = n, g = 0, v = v; ;) { if (g >= v.length) break; nt = v[g++]; f = nt; 100 === f.upload.progress && f.upload.bytesSent === f.upload.total || (a = !1); f.upload.progress = e; f.upload.bytesSent = f.upload.total } if (a) return; for (var y = n, tt = 0, y = y; ;) { if (tt >= y.length) break; it = y[tt++]; p = it; this.emit("uploadprogress", p, e, p.upload.bytesSent) } } } }, { key: "_finishedUploading", value: function (n, i, r) { var u = void 0; if (n[0].status !== t.CANCELED && 4 === i.readyState) { if ("arraybuffer" !== i.responseType && "blob" !== i.responseType && (u = i.responseText, i.getResponseHeader("content-type") && ~i.getResponseHeader("content-type").indexOf("application/json"))) try { u = JSON.parse(u) } catch (n) { r = n; u = "Invalid JSON response from server." } this._updateFilesUploadProgress(n); 200 <= i.status && i.status < 300 ? n[0].upload.chunked ? n[0].upload.finishedChunkUpload(this._getChunk(n[0], i)) : this._finished(n, u, r) : this._handleUploadError(n, i, u) } } }, { key: "_handleUploadError", value: function (n, i, r) { var u; if (n[0].status !== t.CANCELED) { if (n[0].upload.chunked && this.options.retryChunks) { if (u = this._getChunk(n[0], i), u.retries++ < this.options.retryChunksLimit) return void this._uploadData(n, [u.dataBlock]); console.warn("Retried this chunk too often. Giving up.") } for (var f = n, e = 0, f = f; ;) { if (e >= f.length) break; f[e++]; this._errorProcessing(n, r || this.options.dictResponseError.replace("{{statusCode}}", i.status), i) } } } }, { key: "submitRequest", value: function (n, t) { n.send(t) } }, { key: "_finished", value: function (n, i, r) { for (var o, u, f = n, e = 0, f = f; ;) { if (e >= f.length) break; o = f[e++]; u = o; u.status = t.SUCCESS; this.emit("success", u, i, r); this.emit("complete", u) } if (this.options.uploadMultiple && (this.emit("successmultiple", n, i, r), this.emit("completemultiple", n)), this.options.autoProcessQueue) return this.processQueue() } }, { key: "_errorProcessing", value: function (n, i, r) { for (var o, u, f = n, e = 0, f = f; ;) { if (e >= f.length) break; o = f[e++]; u = o; u.status = t.ERROR; this.emit("error", u, i, r); this.emit("complete", u) } if (this.options.uploadMultiple && (this.emit("errormultiple", n, i, r), this.emit("completemultiple", n)), this.options.autoProcessQueue) return this.processQueue() } }], [{ key: "uuidv4", value: function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (n) { var t = 16 * Math.random() | 0; return ("x" === n ? t : 3 & t | 8).toString(16) }) } }]), t }(Emitter); Dropzone.initClass(); Dropzone.version = "5.3.1"; Dropzone.options = {}; Dropzone.optionsForElement = function (n) { if (n.getAttribute("id")) return Dropzone.options[camelize(n.getAttribute("id"))] }; Dropzone.instances = []; Dropzone.forElement = function (n) { if ("string" == typeof n && (n = document.querySelector(n)), null == (null != n ? n.dropzone : void 0)) throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone."); return n.dropzone }; Dropzone.autoDiscover = !0; Dropzone.discover = function () { var n = void 0, t; return document.querySelectorAll ? n = document.querySelectorAll(".dropzone") : (n = [], t = function (t) { return function () { for (var e, u, i = [], r = t, f = 0, r = r; ;) { if (f >= r.length) break; e = r[f++]; u = e; /(^| )dropzone($| )/.test(u.className) ? i.push(n.push(u)) : i.push(void 0) } return i }() }, t(document.getElementsByTagName("div")), t(document.getElementsByTagName("form"))), function () { for (var f, r, t = [], i = n, u = 0, i = i; ;) { if (u >= i.length) break; f = i[u++]; r = f; !1 !== Dropzone.optionsForElement(r) ? t.push(new Dropzone(r)) : t.push(void 0) } return t }() }; Dropzone.blacklistedBrowsers = [/opera.*(Macintosh|Windows Phone).*version\/12/i]; Dropzone.isBrowserSupported = function () { var n = !0, r, u; if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) if ("classList" in document.createElement("a")) for (var t = Dropzone.blacklistedBrowsers, i = 0, t = t; ;) { if (i >= t.length) break; r = t[i++]; u = r; u.test(navigator.userAgent) && (n = !1) } else n = !1; else n = !1; return n }; Dropzone.dataURItoBlob = function (n) { for (var i = atob(n.split(",")[1]), e = n.split(",")[0].split(":")[1].split(";")[0], u = new ArrayBuffer(i.length), o = new Uint8Array(u), t = 0, r = i.length, f = 0 <= r; f ? t <= r : t >= r; f ? t++ : t--)o[t] = i.charCodeAt(t); return new Blob([u], { type: e }) }; without = function (n, t) { return n.filter(function (n) { return n !== t }).map(function (n) { return n }) }; camelize = function (n) { return n.replace(/[\-_](\w)/g, function (n) { return n.charAt(1).toUpperCase() }) }; Dropzone.createElement = function (n) { var t = document.createElement("div"); return t.innerHTML = n, t.childNodes[0] }; Dropzone.elementInside = function (n, t) { if (n === t) return !0; for (; n = n.parentNode;)if (n === t) return !0; return !1 }; Dropzone.getElement = function (n, t) { var i = void 0; if ("string" == typeof n ? i = document.querySelector(n) : null != n.nodeType && (i = n), null == i) throw new Error("Invalid `" + t + "` option provided. Please provide a CSS selector or a plain HTML element."); return i }; Dropzone.getElements = function (n, t) { var r = void 0, i = void 0; if (n instanceof Array) { i = []; try { for (var u = n, e = 0, u = u; !(e >= u.length);)r = u[e++], i.push(this.getElement(r, t)) } catch (n) { i = null } } else if ("string" == typeof n) { i = []; for (var f = document.querySelectorAll(n), o = 0, f = f; !(o >= f.length);)r = f[o++], i.push(r) } else null != n.nodeType && (i = [n]); if (null == i || !i.length) throw new Error("Invalid `" + t + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those."); return i }; Dropzone.confirm = function (n, t, i) { return window.confirm(n) ? t() : null != i ? i() : void 0 }; Dropzone.isValidFile = function (n, t) { var e, i; if (!t) return !0; t = t.split(","); for (var u = n.type, o = u.replace(/\/.*$/, ""), r = t, f = 0, r = r; ;) { if (f >= r.length) break; if (e = r[f++], i = e, i = i.trim(), "." === i.charAt(0)) { if (-1 !== n.name.toLowerCase().indexOf(i.toLowerCase(), n.name.length - i.length)) return !0 } else if (/\/\*$/.test(i)) { if (o === i.replace(/\/.*$/, "")) return !0 } else if (u === i) return !0 } return !1 }; "undefined" != typeof jQuery && null !== jQuery && (jQuery.fn.dropzone = function (n) { return this.each(function () { return new Dropzone(this, n) }) }); "undefined" != typeof module && null !== module ? module.exports = Dropzone : window.Dropzone = Dropzone; Dropzone.ADDED = "added"; Dropzone.QUEUED = "queued"; Dropzone.ACCEPTED = Dropzone.QUEUED; Dropzone.UPLOADING = "uploading"; Dropzone.PROCESSING = Dropzone.UPLOADING; Dropzone.CANCELED = "canceled"; Dropzone.ERROR = "error"; Dropzone.SUCCESS = "success"; var detectVerticalSquash = function (n) { var i = (n.naturalWidth, n.naturalHeight), r = document.createElement("canvas"), u, e; r.width = 1; r.height = i; u = r.getContext("2d"); u.drawImage(n, 0, 0); for (var s = u.getImageData(1, 0, 1, i), h = s.data, f = 0, o = i, t = i; t > f;)0 === h[4 * (t - 1) + 3] ? o = t : f = t, t = o + f >> 1; return e = t / i, 0 === e ? 1 : e }, drawImageIOSFix = function (n, t, i, r, u, f, e, o, s, h) { var c = detectVerticalSquash(t); return n.drawImage(t, i, r, u, f, e, o, s, h / c) }, ExifRestore = function () { function n() { _classCallCheck(this, n) } return _createClass(n, null, [{ key: "initClass", value: function () { this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" } }, { key: "encode64", value: function (n) { for (var o = "", u = void 0, t = void 0, i = "", s = void 0, h = void 0, f = void 0, r = "", e = 0; ;)if (u = n[e++], t = n[e++], i = n[e++], s = u >> 2, h = (3 & u) << 4 | t >> 4, f = (15 & t) << 2 | i >> 6, r = 63 & i, isNaN(t) ? f = r = 64 : isNaN(i) && (r = 64), o = o + this.KEY_STR.charAt(s) + this.KEY_STR.charAt(h) + this.KEY_STR.charAt(f) + this.KEY_STR.charAt(r), u = t = i = "", s = h = f = r = "", !(e < n.length)) break; return o } }, { key: "restore", value: function (n, t) { if (!n.match("data:image/jpeg;base64,")) return t; var i = this.decode64(n.replace("data:image/jpeg;base64,", "")), r = this.slice2Segments(i), u = this.exifManipulation(t, r); return "data:image/jpeg;base64," + this.encode64(u) } }, { key: "exifManipulation", value: function (n, t) { var i = this.getExifArray(t), r = this.insertExif(n, i); return new Uint8Array(r) } }, { key: "getExifArray", value: function (n) { for (var t = void 0, i = 0; i < n.length;) { if (t = n[i], 255 === t[0] & 225 === t[1]) return t; i++ } return [] } }, { key: "insertExif", value: function (n, t) { var f = n.replace("data:image/jpeg;base64,", ""), r = this.decode64(f), u = r.indexOf(255, 3), e = r.slice(0, u), o = r.slice(u), i = e; return i = i.concat(t), i = i.concat(o) } }, { key: "slice2Segments", value: function (n) { for (var u, r, f, t = 0, i = []; ;) { if (255 === n[t] & 218 === n[t + 1]) break; if (255 === n[t] & 216 === n[t + 1] ? t += 2 : (u = 256 * n[t + 2] + n[t + 3], r = t + u + 2, f = n.slice(t, r), i.push(f), t = r), t > n.length) break } return i } }, { key: "decode64", value: function (n) { var e = void 0, o = void 0, s = "", h = void 0, r = void 0, t = void 0, u = "", i = 0, f = []; for (/[^A-Za-z0-9\+\/\=]/g.exec(n) && console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding."), n = n.replace(/[^A-Za-z0-9\+\/\=]/g, ""); ;)if (h = this.KEY_STR.indexOf(n.charAt(i++)), r = this.KEY_STR.indexOf(n.charAt(i++)), t = this.KEY_STR.indexOf(n.charAt(i++)), u = this.KEY_STR.indexOf(n.charAt(i++)), e = h << 2 | r >> 4, o = (15 & r) << 4 | t >> 2, s = (3 & t) << 6 | u, f.push(e), 64 !== t && f.push(o), 64 !== u && f.push(s), e = o = s = "", h = r = t = u = "", !(i < n.length)) break; return f } }]), n }(); ExifRestore.initClass(); contentLoaded = function (n, t) { var o = !1, f = !0, i = n.document, s = i.documentElement, e = i.addEventListener ? "addEventListener" : "attachEvent", h = i.addEventListener ? "removeEventListener" : "detachEvent", r = i.addEventListener ? "" : "on", u = function f(u) { if ("readystatechange" !== u.type || "complete" === i.readyState) return ("load" === u.type ? n : i)[h](r + u.type, f, !1), !o && (o = !0) ? t.call(n, u.type || u) : void 0 }; if ("complete" !== i.readyState) { if (i.createEventObject && s.doScroll) { try { f = !n.frameElement } catch (n) { } f && function n() { try { s.doScroll("left") } catch (t) { return void setTimeout(n, 50) } return u("poll") }() } return i[e](r + "DOMContentLoaded", u, !1), i[e](r + "readystatechange", u, !1), n[e](r + "load", u, !1) } }; Dropzone._autoDiscoverFunction = function () { if (Dropzone.autoDiscover) return Dropzone.discover() }; contentLoaded(window, Dropzone._autoDiscoverFunction), function () { window.kentico.pageBuilder.registerInlineEditor("image-uploader-editor", { init: function (n) { var t = n.editor, f = t.querySelector(".uploader"), e = t.querySelector(".dz-clickable"), i = t.getAttribute("data-file-type") === "media", r, u; i && (r = t.querySelector(".dialog-link"), r.addEventListener("click", function () { var i = { libraryName: "Graphics", maxFilesLimit: 1, allowedExtensions: ".gif;.png;.jpg;.jpeg;.svg;.webp;.mp4", selectedValues: n.propertyValue, applyCallback: function (i) { var r, u; if (i !== null && i.length > 0) { if (r = i[0], n.propertyValue && n.propertyValue.length && r.fileGuid === n.propertyValue[0].fileGuid) return { closeDialog: !0 }; u = new CustomEvent("updateProperty", { detail: { value: [{ fileGuid: r.fileGuid }], name: n.propertyName } }); t.dispatchEvent(u) } return { closeDialog: !0 } } }; window.kentico.modalDialog.mediaFilesSelector.open(i) })); u = new Dropzone(f, { acceptedFiles:".mp4",maxFiles:1,url:t.getAttribute("data-url"),createImageThumbnails:!1,clickable:e,dictInvalidFileType:n.localizationService.getString("You can't upload files of this type.")});u.on("success",function(r){var u=JSON.parse(r.xhr.response),f=new CustomEvent("updateProperty",{detail:{value:i?[{fileGuid:u.guid}]:u.guid,name:n.propertyName}});t.dispatchEvent(f)})},destroy:function(n){var t=n.editor.querySelector(".uploader").dropzone;t&&t.destroy()}})}(),function(){window.kentico.pageBuilder.registerInlineEditor("spinner-editor",{init:function(n){var t=n.editor,i;t.querySelector("#value-placeholder").innerText=n.propertyValue;i=t.querySelector("#minus-btn");n.propertyValue<2?i.disabled=!0:i.addEventListener("click",function(){var i=new CustomEvent("updateProperty",{detail:{value:n.propertyValue-1,name:n.propertyName}});t.dispatchEvent(i)});t.querySelector("#plus-btn").addEventListener("click",function(){var i=new CustomEvent("updateProperty",{detail:{value:n.propertyValue+1,name:n.propertyName}});t.dispatchEvent(i)})}})}(),function(){window.kentico.pageBuilder.registerInlineEditor("text-editor",{init:function(n){var t=n.editor;t.addEventListener("input",function(){this.textContent||(this.innerHTML="");var i=new CustomEvent("updateProperty",{detail:{name:n.propertyName,value:this.textContent,refreshMarkup:!1}});t.dispatchEvent(i)})}})}();